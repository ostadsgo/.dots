#!/usr/bin/python

import json
import os
import signal
import subprocess

HOME = "/home/saeed"
CONFIG_PATH = f"{HOME}/.config"
KITTY_PATH = f"{CONFIG_PATH}/kitty"
KITTY_THEMES_PATH = f"{CONFIG_PATH}/kitty/themes"
ROFI_PATH = f"{CONFIG_PATH}/rofi"
ROFI_THEMES_PATH = f"{CONFIG_PATH}/rofi/themes"
DUNST_PATH = f"{CONFIG_PATH}/dunst"
DUNST_THEMES_PATH = f"{CONFIG_PATH}/dunst/themes"
NVIM_PATH = f"{CONFIG_PATH}/nvim"
NVIM_PLUGINS_PATH = f"{NVIM_PATH}/lua/plugins"
QTILE_PATH = f"{CONFIG_PATH}/qtile"


def readfile(filename):
    with open(filename) as f:
        lines = f.readlines()
    return lines


def writefile(filename, lines):
    with open(filename, "w") as colorscheme_file:
        for line in lines:
            colorscheme_file.write(line)
    return True


def updatefile(lines, old, new):
    for index, line in enumerate(lines[:]):
        if old in line:
            lines[index] = new
            return lines


def themes_dict():
    with open("/home/saeed/.local/bin/scripts/newlook.json") as json_file:
        themes = json.load(json_file)
        return themes


def print_themes():
    for theme in themes_dict():
        print(theme.get("id"), theme.get("name"))


def get_theme_by_id(theme_id: str):
    for theme in themes_dict():
        if theme.get("id") == theme_id:
            return theme.get("name")
    return 0


def reload_proc(name: str):
    pids_raw = subprocess.check_output(["pidof", name])
    pids = [int(pid) for pid in pids_raw.decode().split()]
    for pid in pids:
        os.kill(pid, signal.SIGUSR1)


def get_nvim_theme(theme_name):
    for theme in themes_dict():
        if theme.get("name") == theme_name:
            return theme.get("nvim")


def apply_theme_neovim(theme_name):
    # theme nvim package name
    theme_name = get_nvim_theme(theme_name)
    # filename
    filename = f"{NVIM_PATH}/lua/plugins/colorscheme.lua"
    # read
    lines = readfile(filename)
    # update
    old_line = "vim.cmd('colorscheme "
    new_line = f"vim.cmd('colorscheme  {theme_name}')\n"
    lines = updatefile(lines, old_line, new_line)
    # write
    writefile(filename, lines)
    # reload nvim colors !!


def apply_theme_qtile(theme_name: str):
    screen_file = f"{QTILE_PATH}/modules/screen.py"
    lines = readfile(screen_file)
    # update
    old_line = "from .colors import"
    new_line = f"from .colors import {theme_name.title()} as c\n"
    lines = updatefile(lines, old_line, new_line)
    # write file
    writefile(screen_file, lines)
    # set theme color in core for border color
    core_file = f"{QTILE_PATH}/modules/core.py"
    lines = readfile(core_file)
    # update
    old_line = "from .colors import"
    new_line = f"from .colors import {theme_name.title()} as c\n"
    lines = updatefile(lines, old_line, new_line)
    # write file
    writefile(core_file, lines)
    # reload qtile
    qtile_reload_cmd = "qtile cmd-obj -o cmd -f reload_config"
    os.system(qtile_reload_cmd)


def make_soft_link(src: str, dist: str):
    cmd = f"ln -sf {src} {dist}"
    os.system(cmd)


def apply_kitty(theme_name: str):
    make_soft_link(f"{KITTY_PATH}/themes/{theme_name}.conf", f"{KITTY_PATH}/kitty.conf")
    reload_proc("kitty")


def apply_rofi(theme_name):
    make_soft_link(f"{ROFI_THEMES_PATH}/{theme_name}.rasi", f"{ROFI_PATH}/config.rasi")


def apply_dunst(theme_name):
    make_soft_link(f"{DUNST_THEMES_PATH}/{theme_name}", f"{DUNST_PATH}/dunstrc")
    os.system("killall dunst && dunst &")


def apply_theme(theme_name: str):
    apply_kitty(theme_name)
    apply_rofi(theme_name)
    apply_dunst(theme_name)
    apply_theme_neovim(theme_name)
    apply_theme_qtile(theme_name)
    print(f"Theme changed to {theme_name} successfuly.")


def choose_theme():
    print_themes()
    user_response = input("Choose theme number: ")
    theme = get_theme_by_id(user_response)
    if theme:
        apply_theme(theme)
    else:
        print("Invalid choice.")


def main():
    choose_theme()


if __name__ == "__main__":
    main()
