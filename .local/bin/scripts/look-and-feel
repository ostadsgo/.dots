#!/usr/bin/python


import os

HOME = "/home/saeed"
CONFIG_PATH = f"{HOME}/.config"
KITTY_PATH = f"{CONFIG_PATH}/kitty"
KITTY_THEMES_PATH = f"{CONFIG_PATH}/kitty/themes"
ROFI_PATH = f"{CONFIG_PATH}/rofi"
ROFI_THEMES_PATH = f"{CONFIG_PATH}/rofi/themes"
DUNST_PATH = f"{CONFIG_PATH}/dunst"
DUNST_THEMES_PATH = f"{CONFIG_PATH}/dunst/themes"
NEOVIM_PATH = f"{CONFIG_PATH}/nvim"
QTILE_PATH = f"{CONFIG_PATH}/qtile"
QTILE_SCREEN_PATH = f"{QTILE_PATH}/modules/screen"
QTILE_COLORSCHEMES_PATH = f"{QTILE_PATH}/modules/screen/colorschemes"


def themes_dict():
    themes_name = os.listdir(KITTY_THEMES_PATH)
    themes = []
    for index, theme_file in enumerate(themes_name, 1):
        theme_dict = {
            "id": str(index),
            "theme_file": theme_file,
            "name": theme_file.split(".")[0].title(),
        }
        themes.append(theme_dict)
    return themes


def print_themes():
    for theme in themes_dict():
        print(theme.get("id") + ")", theme.get("name"))


def get_theme_by_id(theme_id: str):
    for theme in themes_dict():
        if theme.get("id") == theme_id:
            return theme.get("theme_file")
    return False


def apply_theme_neovim(theme_name):
    colorscheme_file_path = f"{NEOVIM_PATH}/lua/plugins/colors.lua"
    with open(colorscheme_file_path) as colorscheme_file:
        lines = colorscheme_file.readlines()
        for index, line in enumerate(lines[:]):
            if "local colorscheme = " in line:
                lines[index] = f'local colorscheme = "{theme_name}"\n'
                break
    # write file
    with open(colorscheme_file_path, "w") as colorscheme_file:
        for line in lines:
            colorscheme_file.write(line)


def apply_theme(theme_file: str):
    # applay theme for kitty
    theme, _ = theme_file.split(".")
    cmd = f"ln -sf {KITTY_PATH}/themes/{theme}.conf {KITTY_PATH}/kitty.conf"
    os.system(cmd)
    # apply theme for rofi
    cmd = f"ln -sf {ROFI_THEMES_PATH}/{theme}.rasi {ROFI_PATH}/config.rasi"
    os.system(cmd)
    # apply theme for dunst
    cmd = f"ln -sf {DUNST_THEMES_PATH}/{theme} {DUNST_PATH}/dunstrc"
    os.system(cmd)
    os.system("killall dunst && dunst &")
    # apply theme for Neovim
    apply_theme_neovim(theme)
    # apply colorscheme for qtile
    cmd = f"ln -sf {QTILE_COLORSCHEMES_PATH}/{theme}.py {QTILE_SCREEN_PATH}/color.py"
    qtile_reload_cmd = "qtile cmd-obj -o cmd -f reload_config"
    os.system(cmd)
    os.system(qtile_reload_cmd)
    print("Theme changed successfully.")


def choose_theme():
    print_themes()
    user_response = input("Choose theme number: ")
    theme = get_theme_by_id(user_response)
    print(theme)
    if theme:
        print("Applying theme ....")
        apply_theme(theme)
    else:
        print("Invalid choice.")


def main():
    choose_theme()


if __name__ == "__main__":
    main()
