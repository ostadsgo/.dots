#!/usr/bin/python


import os

# -----------
# Kitty
# ----------
HOME = "/home/saeed"
CONFIG_PATH = f"{HOME}/.config"
KITTY_PATH = f"{CONFIG_PATH}/kitty"
KITTY_THEMES_PATH = f"{CONFIG_PATH}/kitty/themes"

# kitty_themes = os.listdir(KITTY_THEMES_PATH)
# themes = []
#
#
# for index, theme_file in enumerate(kitty_themes, 1):
#     theme_dict = {
#         "id": str(index),
#         "theme_file": theme_file,
#         "name": theme_file.split(".")[0].title(),
#     }
#     themes.append(theme_dict)
#
# for theme in themes:
#     print(theme.get("id") + ")", theme.get("name"))
#
# selected_theme = input("Choose theme: ")
#
# # extract user selected theme from themes list and apply theme
# for theme in themes:
#     if theme.get("id") == selected_theme:
#         theme_file = theme.get("theme_file")
#         cmd = f"ln -sf {KITTY_PATH}/themes/{theme_file} {KITTY_PATH}/kitty.conf"
#         os.system(cmd)
#         print("Theme changed successfully.")
#         break
# else:
#     print("theme not found")

# -------
# Rofi
# -------
# ROFI_PATH = f"{CONFIG_PATH}/rofi"
# ROFI_THEMES_PATH = f"{CONFIG_PATH}/rofi/themes"
#
# rofi_theme_files = os.listdir(ROFI_THEMES_PATH)
#
# themes = []
#
#
# for index, theme_file in enumerate(rofi_theme_files, 1):
#     theme_dict = {
#         "id": str(index),
#         "theme_file": theme_file,
#         "name": theme_file.split(".")[0].title(),
#     }
#     themes.append(theme_dict)
#
# for theme in themes:
#     print(theme.get("id") + ")", theme.get("name"))
#
# selected_theme = input("Choose theme: ")
#
# # extract user selected theme from themes list and apply theme
# for theme in themes:
#     if theme.get("id") == selected_theme:
#         theme_file = theme.get("theme_file")
#         cmd = f"ln -sf {ROFI_THEMES_PATH}/{theme_file} {ROFI_PATH}/config.rasi"
#         print(cmd)
#         os.system(cmd)
#         print("Theme changed successfully.")
#         break
# else:
#     print("theme not found")


# -----
# dunst
# ---
# DUNST_PATH = f"{CONFIG_PATH}/dunst"
# DUNST_THEMES_PATH = f"{CONFIG_PATH}/dunst/themes"
#
# dunst_theme_files = os.listdir(DUNST_THEMES_PATH)
#
# themes = []
#
#
# for index, theme_file in enumerate(dunst_theme_files, 1):
#     theme_dict = {
#         "id": str(index),
#         "theme_file": theme_file,
#         "name": theme_file.split(".")[0].title(),
#     }
#     themes.append(theme_dict)
#
# for theme in themes:
#     print(theme.get("id") + ")", theme.get("name"))
#
# selected_theme = input("Choose theme: ")
#
# # extract user selected theme from themes list and apply theme
# for theme in themes:
#     if theme.get("id") == selected_theme:
#         theme_file = theme.get("theme_file")
#         cmd = f"ln -sf {DUNST_THEMES_PATH}/{theme_file} {DUNST_PATH}/dunstrc"
#         os.system(cmd)
#         print("Theme changed successfully.")
#         break
# else:
#     print("theme not found")







